{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":30179,"status":"ok","timestamp":1701399964876,"user":{"displayName":"金子雄司","userId":"09721677538864473570"},"user_tz":-540},"id":"mbHQn24Aend3","outputId":"2865b663-75e9-45e5-968f-1d871cf3dd3b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["# prompt: driveをマウント\n","\n","from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"roshTV9LgBaY"},"outputs":[],"source":["import pandas as pd\n","import glob"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lK76uwWIe_fY"},"outputs":[],"source":["df = pd.read_csv(\"/content/drive/MyDrive/一般-外科.csv\",encoding='cp932')"]},{"cell_type":"markdown","metadata":{"id":"uRCthf1vmA6r"},"source":["データ元\n","*   https://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-A31-v2_1.html\n","*   国土数値情報ダウンロード（geojson形式）\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kF7Y3Q5ifHO8"},"outputs":[],"source":["#計画規模フォルダ内のgeojsonのリスト\n","keikaku_files = glob.glob('/content/drive/MyDrive/降雨被害/10_沖縄総合事務局/02_想定最大規模/*.geojson')"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"P1X7RtNVBYQ2","executionInfo":{"status":"ok","timestamp":1703683670507,"user_tz":-540,"elapsed":606,"user":{"displayName":"金子雄司","userId":"09721677538864473570"}}},"outputs":[],"source":["import geopandas as gpd"]},{"cell_type":"code","source":["print(gpd.__version__)"],"metadata":{"id":"Y_j3GLdIdur1","executionInfo":{"status":"ok","timestamp":1703683752047,"user_tz":-540,"elapsed":544,"user":{"displayName":"金子雄司","userId":"09721677538864473570"}},"outputId":"42d23023-9cef-4ea6-98f7-85567548d43a","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["0.13.2\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1701402609045,"user":{"displayName":"金子雄司","userId":"09721677538864473570"},"user_tz":-540},"id":"Z2OJSy_7c-kC","outputId":"70701d0b-027b-4420-a0a4-6ed5daf4a687"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["['/content/drive/MyDrive/降雨被害/10_沖縄総合事務局/02_想定最大規模/A31-20-21_4700130001.geojson',\n"," '/content/drive/MyDrive/降雨被害/10_沖縄総合事務局/02_想定最大規模/A31-20-21_4700140001.geojson',\n"," '/content/drive/MyDrive/降雨被害/10_沖縄総合事務局/02_想定最大規模/A31-20-21_4700510001.geojson',\n"," '/content/drive/MyDrive/降雨被害/10_沖縄総合事務局/02_想定最大規模/A31-20-21_4700200001.geojson']"]},"metadata":{},"execution_count":86}],"source":["keikaku_files"]},{"cell_type":"markdown","metadata":{"id":"dUYKxN6cCXkf"},"source":["1つお試し"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2-wtiWztCYJI"},"outputs":[],"source":["# GeoJSONファイルのパス\n","file_path = keikaku_files[0]\n","\n","# ファイルの読み込み\n","gdf = gpd.read_file(file_path)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"executionInfo":{"elapsed":3924,"status":"ok","timestamp":1700867372692,"user":{"displayName":"金子雄司","userId":"09721677538864473570"},"user_tz":-540},"id":"PIut88iZCa33","outputId":"6933d25c-000c-4f9d-91c3-941e387d6562"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["import matplotlib.pyplot as plt\n","\n","# データのプロット\n","gdf.plot()\n","\n","# 可視化の表示\n","plt.show()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"id":"JqNf-t53Gw8E","outputId":"5c0a1f81-6d09-4e9d-8c9e-730c4e19dd21","executionInfo":{"status":"ok","timestamp":1701402643685,"user_tz":-540,"elapsed":4859,"user":{"displayName":"金子雄司","userId":"09721677538864473570"}}},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}],"source":["# すべてのファイルを読み込んでリストに格納\n","dataframes = [gpd.read_file(file) for file in keikaku_files]\n","\n","# データフレームを結合\n","combined_gdf = pd.concat(dataframes, ignore_index=True)\n","\n","import matplotlib.pyplot as plt\n","\n","combined_gdf.plot()\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":439},"executionInfo":{"elapsed":2722,"status":"error","timestamp":1700211462230,"user":{"displayName":"金子雄司","userId":"09721677538864473570"},"user_tz":-540},"id":"MnKlqjXRGw-T","outputId":"6b0de8ed-9842-48a9-ebc8-da9e9ee6bee5"},"outputs":[{"ename":"KeyboardInterrupt","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-192-e8f027cc62de>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#保存しておく\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mcombined_gdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_file\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"combined_data_shikoku_keikaku.geojson\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdriver\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'GeoJSON'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m#読み込み\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/geopandas/geodataframe.py\u001b[0m in \u001b[0;36mto_file\u001b[0;34m(self, filename, driver, schema, index, **kwargs)\u001b[0m\n\u001b[1;32m   1261\u001b[0m         \u001b[0;32mfrom\u001b[0m \u001b[0mgeopandas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfile\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0m_to_file\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1262\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1263\u001b[0;31m         \u001b[0m_to_file\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfilename\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdriver\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mschema\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1264\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1265\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mset_crs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcrs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepsg\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallow_override\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/geopandas/io/file.py\u001b[0m in \u001b[0;36m_to_file\u001b[0;34m(df, filename, driver, schema, index, mode, crs, engine, **kwargs)\u001b[0m\n\u001b[1;32m    570\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    571\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"fiona\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 572\u001b[0;31m         \u001b[0m_to_file_fiona\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfilename\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdriver\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mschema\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcrs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    573\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"pyogrio\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    574\u001b[0m         \u001b[0m_to_file_pyogrio\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfilename\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdriver\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mschema\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcrs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/geopandas/io/file.py\u001b[0m in \u001b[0;36m_to_file_fiona\u001b[0;34m(df, filename, driver, schema, crs, mode, **kwargs)\u001b[0m\n\u001b[1;32m    599\u001b[0m             \u001b[0mfilename\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdriver\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdriver\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcrs_wkt\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcrs_wkt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mschema\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mschema\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    600\u001b[0m         ) as colxn:\n\u001b[0;32m--> 601\u001b[0;31m             \u001b[0mcolxn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwriterecords\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miterfeatures\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    602\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    603\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/fiona/collection.py\u001b[0m in \u001b[0;36mwriterecords\u001b[0;34m(self, records)\u001b[0m\n\u001b[1;32m    556\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m\"a\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"w\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    557\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mOSError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"collection not open for writing\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 558\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msession\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwriterecs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrecords\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    559\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_len\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msession\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_length\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    560\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_bounds\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mfiona/ogrext.pyx\u001b[0m in \u001b[0;36mfiona.ogrext.WritingSession.writerecs\u001b[0;34m()\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/geopandas/geodataframe.py\u001b[0m in \u001b[0;36miterfeatures\u001b[0;34m(self, na, show_bbox, drop_id)\u001b[0m\n\u001b[1;32m    923\u001b[0m             \u001b[0mproperties_cols\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mproperties_cols\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    924\u001b[0m             \u001b[0mproperties\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mproperties_cols\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobject\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 925\u001b[0;31m             \u001b[0mna_mask\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mproperties_cols\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    926\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    927\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mna\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"null\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/dtypes/missing.py\u001b[0m in \u001b[0;36misna\u001b[0;34m(obj)\u001b[0m\n\u001b[1;32m    183\u001b[0m     \u001b[0mName\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mbool\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    184\u001b[0m     \"\"\"\n\u001b[0;32m--> 185\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_isna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    186\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    187\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/dtypes/missing.py\u001b[0m in \u001b[0;36m_isna\u001b[0;34m(obj, inf_as_na)\u001b[0m\n\u001b[1;32m    226\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    227\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mABCDataFrame\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 228\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    229\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    230\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0m_isna_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mobject\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minf_as_na\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minf_as_na\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36misna\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   6377\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mdoc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mNDFrame\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misna\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mklass\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0m_shared_doc_kwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"klass\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6378\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0misna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mDataFrame\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6379\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_constructor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mgr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0misna\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6380\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__finalize__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"isna\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6381\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/base.py\u001b[0m in \u001b[0;36misna\u001b[0;34m(self, func)\u001b[0m\n\u001b[1;32m    141\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mfinal\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    142\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0misna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mT\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mT\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 143\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"apply\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    144\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    145\u001b[0m     \u001b[0;31m# --------------------------------------------------------------------\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self, f, align_keys, ignore_failures, **kwargs)\u001b[0m\n\u001b[1;32m    350\u001b[0m                     \u001b[0mapplied\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    351\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 352\u001b[0;31m                     \u001b[0mapplied\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    353\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mTypeError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mNotImplementedError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    354\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mignore_failures\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/blocks.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self, func, **kwargs)\u001b[0m\n\u001b[1;32m    349\u001b[0m         \u001b[0mone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    350\u001b[0m         \"\"\"\n\u001b[0;32m--> 351\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    352\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    353\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_split_op_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/dtypes/missing.py\u001b[0m in \u001b[0;36misna\u001b[0;34m(obj)\u001b[0m\n\u001b[1;32m    183\u001b[0m     \u001b[0mName\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mbool\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    184\u001b[0m     \"\"\"\n\u001b[0;32m--> 185\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_isna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    186\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    187\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/dtypes/missing.py\u001b[0m in \u001b[0;36m_isna\u001b[0;34m(obj, inf_as_na)\u001b[0m\n\u001b[1;32m    212\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    213\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mABCExtensionArray\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 214\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_isna_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minf_as_na\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minf_as_na\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    215\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mABCIndex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    216\u001b[0m         \u001b[0;31m# Try to use cached isna, which also short-circuits for integer dtypes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/dtypes/missing.py\u001b[0m in \u001b[0;36m_isna_array\u001b[0;34m(values, inf_as_na)\u001b[0m\n\u001b[1;32m    294\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[assignment]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    295\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mis_string_or_object_np_dtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 296\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_isna_string_dtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minf_as_na\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minf_as_na\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    297\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mneeds_i8_conversion\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    298\u001b[0m         \u001b[0;31m# this is the NaT pattern\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/dtypes/missing.py\u001b[0m in \u001b[0;36m_isna_string_dtype\u001b[0;34m(values, inf_as_na)\u001b[0m\n\u001b[1;32m    318\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlibmissing\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misnaobj\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minf_as_na\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minf_as_na\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    319\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 320\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlibmissing\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misnaobj2d\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minf_as_na\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minf_as_na\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    321\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    322\u001b[0m             \u001b[0;31m# 0-D, reached via e.g. mask_missing\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["#保存しておく\n","combined_gdf.to_file(\"combined_data_shikoku_keikaku.geojson\", driver='GeoJSON')\n","\n","\n","#読み込み\n","combined_gdf = gpd.read_file(\"combined_data_shikoku_keikaku.geojson\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SDizVvKTGxA3"},"outputs":[],"source":["from shapely.geometry import Point\n","\n","# 緯度経度が含まれるデータフレームを変換\n","gdf_points = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df.fX, df.fY))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":373,"status":"ok","timestamp":1701403326787,"user":{"displayName":"金子雄司","userId":"09721677538864473570"},"user_tz":-540},"id":"8oWT2ipmGxD5","outputId":"18a7681f-d9ee-4cfe-91ce-f4ef523b524a"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py:3473: FutureWarning: The `op` parameter is deprecated and will be removed in a future release. Please use the `predicate` parameter instead.\n","  if (await self.run_code(code, result,  async_=asy)):\n","<ipython-input-172-154d9e058f69>:2: UserWarning: CRS mismatch between the CRS of left geometries and the CRS of right geometries.\n","Use `to_crs()` to reproject one of the input geometries to match the CRS of the other.\n","\n","Left CRS: None\n","Right CRS: EPSG:6668\n","\n","  points_within_polygons = gpd.sjoin(gdf_points, combined_gdf, how='inner', op='within')\n"]}],"source":["#gpd.sjoinを使用して、ポリゴン内に含まれる点を判定します。\n","points_within_polygons = gpd.sjoin(gdf_points, combined_gdf, how='inner', op='within')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1701403327081,"user":{"displayName":"金子雄司","userId":"09721677538864473570"},"user_tz":-540},"id":"0J9MB-uuG_uo","outputId":"c7ce9a11-8c20-426a-eadb-53df2a536942"},"outputs":[{"output_type":"stream","name":"stdout","text":["26\n"]}],"source":["#含まれる点の個数を数える:結合されたGeoDataFrame内の行の数を数えます。\n","number_of_points_within = points_within_polygons.shape[0]\n","print(number_of_points_within)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AL5FkiRF0XTd"},"outputs":[],"source":["points_within_polygons_duplicates = points_within_polygons.drop_duplicates(subset='名称')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1701403330003,"user":{"displayName":"金子雄司","userId":"09721677538864473570"},"user_tz":-540},"id":"B1SU2cWP0zhe","outputId":"4dd2d7a3-a8a1-4301-e33b-e7928583da6f"},"outputs":[{"output_type":"stream","name":"stdout","text":["26\n"]}],"source":["number_of_points_within_dup = points_within_polygons_duplicates.shape[0]\n","print(number_of_points_within_dup)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4,"status":"ok","timestamp":1701403331694,"user":{"displayName":"金子雄司","userId":"09721677538864473570"},"user_tz":-540},"id":"toDD14ri-1mE","outputId":"f62e6585-a34b-4ea9-e435-09abe1c34a03"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['沖縄'], dtype=object)"]},"metadata":{},"execution_count":176}],"source":["pref = points_within_polygons_duplicates['都道府県'].unique()\n","pref"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_9IfYRtdAGok"},"outputs":[],"source":["# prefを一つずつ代入\n","pref_0 = '沖縄'"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1701403335573,"user":{"displayName":"金子雄司","userId":"09721677538864473570"},"user_tz":-540},"id":"rJ8tMcw3BGAe","outputId":"fd25d73d-5f95-4402-b2ab-4680d4e52b13"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["26"]},"metadata":{},"execution_count":178}],"source":["# 被害施設数\n","points_within_polygons_duplicates['都道府県'].eq(pref_0).sum()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3,"status":"ok","timestamp":1701403336396,"user":{"displayName":"金子雄司","userId":"09721677538864473570"},"user_tz":-540},"id":"UESBD15UhcfD","outputId":"528ba4de-e14e-42e6-f675-5871012c2c0d"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-179-53e40ed4b021>:2: FutureWarning: The default value of numeric_only in GeoDataFrame.sum is deprecated. In a future version, it will default to False. In addition, specifying 'numeric_only=None' is deprecated. Select only valid columns or specify the value of numeric_only to silence this warning.\n","  points_within_polygons_duplicates[points_within_polygons_duplicates[\"都道府県\"] == pref_0].sum()\n"]},{"output_type":"execute_result","data":{"text/plain":["施設種類           一般診療所一般診療所一般診療所一般診療所一般診療所一般診療所一般診療所一般診療所一般診療所一...\n","名称             医療法人琉藍会鏡原外科医院大田整形外科医院当山美容形成外科ＡＮＮＥＸにこにこ整形外科医院浦崎...\n","住所             那覇市鏡原町２７番２号那覇市小禄１－１－５０那覇市久茂地３－７－１那覇市壺川２－１１－２那覇...\n","総病床数                                                        13.0\n","医療圏                                                          0.0\n","都道府県           沖縄沖縄沖縄沖縄沖縄沖縄沖縄沖縄沖縄沖縄沖縄沖縄沖縄沖縄沖縄沖縄沖縄沖縄沖縄沖縄沖縄沖縄沖縄...\n","LocName        沖縄県/那覇市/鏡原町/２７番沖縄県/那覇市/小禄/一丁目/１番沖縄県/那覇市/久茂地/三丁...\n","fX                                                    3320.24655\n","fY                                                     681.56032\n","Unnamed: 9                                                   0.0\n","都道府県.1                                                         0\n","施設数                                                          0.0\n","病床数                                                          0.0\n","index_right                                                41255\n","FID                                                        11703\n","A31_201        4700130001470013000147001400014700130001470014...\n","A31_202        国場川国場川安里川国場川安里川安里川安里川安里川安里川安里川安里川安里川安里川安里川安里川安...\n","A31_203                                                     1222\n","A31_204        沖縄県沖縄県沖縄県沖縄県沖縄県沖縄県沖縄県沖縄県沖縄県沖縄県沖縄県沖縄県沖縄県沖縄県沖縄県沖...\n","A31_205                                                       45\n","A31_206                                                         \n","A31_207                                                         \n","A31_208                                                         \n","dtype: object"]},"metadata":{},"execution_count":179}],"source":["# 総病床数のみ確認\n","points_within_polygons_duplicates[points_within_polygons_duplicates[\"都道府県\"] == pref_0].sum()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Xog9d3XPI-0w"},"outputs":[],"source":["excel_file_path = '10_沖縄_想定.xlsx'  # 保存先のファイルパス\n","points_within_polygons_duplicates.to_excel(excel_file_path, index=False)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BCKWuEN_4PS7"},"outputs":[],"source":[]}],"metadata":{"colab":{"provenance":[{"file_id":"1Fw35B3j-bKZ-OsTUGLiCNkOKENkt2r5l","timestamp":1700035695183}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}